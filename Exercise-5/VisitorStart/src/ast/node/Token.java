/* 
 * Token
 * 
 * Generic token class for the abstract syntax tree.  Only needed for 
 * numbers and identifiers.
 * 
 * This file was originally generated by SableCC (http://www.sablecc.org/) 
 * and then modified.
 */

package ast.node;

import ast.visitor.IAnalysis;

@SuppressWarnings("nls")
public class Token extends Node
{
    private String text;
    private int line;
    private int pos;
    
    public Token(String text, int line, int pos) 
    {
        this.text = text;
        this.line = line;
        this.pos = pos;
    }

    public String getText()
    {
        return this.text;
    }

    public void setText(@SuppressWarnings("hiding") String text)
    {
        this.text = text;
    }

    public int getLine()
    {
        return this.line;
    }

    public void setLine(@SuppressWarnings("hiding") int line)
    {
        this.line = line;
    }

    public int getPos()
    {
        return this.pos;
    }

    public void setPos(@SuppressWarnings("hiding") int pos)
    {
        this.pos = pos;
    }

    @Override
    public String toString()
    {
        return this.text + " ";
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        throw new RuntimeException("Not a child.");
    }
    
    @Override
    public Object clone()
    {
      return new Token(getText(), getLine(), getPos());
    }

    public void accept(ISwitch sw)
    {
        ((IAnalysis) sw).caseToken(this);
    }

}
