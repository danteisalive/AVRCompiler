/* This file was generated by SableCC (http://www.sablecc.org/). 
   
   The file was later modified to specialize it for 
   the constant integer expression AST.
   
   This class redefines the visit methods for each AST node (e.g. inPlusExp, 
   etc) so that the AST is visited in a right-to-left depth-first fashion.
   
*/

package ast.visitor;

import ast.node.*;

public class ReversedDepthFirstVisitor extends AnalysisVisitor
{
 
    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void inPlusExp(PlusExp node)
    {
        defaultIn(node);
    }

    public void outPlusExp(PlusExp node)
    {
        defaultOut(node);
    }

    public void casePlusExp(PlusExp node)
    {
        inPlusExp(node);
        if(node.getRExp() != null)
        {
            node.getRExp().accept(this);
        }
        if(node.getLExp() != null)
        {
            node.getLExp().accept(this);
        }
        outPlusExp(node);
    }

    public void inMinusExp(MinusExp node)
    {
        defaultIn(node);
    }

    public void outMinusExp(MinusExp node)
    {
        defaultOut(node);
    }

    public void caseMinusExp(MinusExp node)
    {
        inMinusExp(node);
        if(node.getRExp() != null)
        {
            node.getRExp().accept(this);
        }
        if(node.getLExp() != null)
        {
            node.getLExp().accept(this);
        }
        outMinusExp(node);
    }

    public void inMulExp(MulExp node)
    {
        defaultIn(node);
    }

    public void outMulExp(MulExp node)
    {
        defaultOut(node);
    }

    public void caseMulExp(MulExp node)
    {
        inMulExp(node);
        if(node.getRExp() != null)
        {
            node.getRExp().accept(this);
        }
        if(node.getLExp() != null)
        {
            node.getLExp().accept(this);
        }
        outMulExp(node);
    }



    public void inIntegerExp(IntegerExp node)
    {
        defaultIn(node);
    }

    public void outIntegerExp(IntegerExp node)
    {
        defaultOut(node);
    }

    public void caseIntegerExp(IntegerExp node)
    {
        inIntegerExp(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().accept(this);
        }
        outIntegerExp(node);
    }
    
    public void inToken(Token node)
    {
        defaultIn(node);
    }

    public void outToken(Token node)
    {
        defaultOut(node);
    }

    /* Tokens are leaf nodes in the AST */
    @Override
    public void caseToken(Token node)
    {
        inToken(node);
        outToken(node);
    }
    

}
