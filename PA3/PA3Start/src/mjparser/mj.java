
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 24 22:43:15 EDT 2019
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast_visitors.DotVisitor;
import ast.node.*;
import ast.visitor.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 24 22:43:15 EDT 2019
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\007\000\002\021" +
    "\002\000\002\022\002\000\002\012\025\000\002\013\004" +
    "\000\002\013\002\000\002\014\004\000\002\014\002\000" +
    "\002\016\004\000\002\016\002\000\002\015\005\000\002" +
    "\015\004\000\002\015\002\000\002\017\005\000\002\017" +
    "\004\000\002\017\002\000\002\020\006\000\002\020\010" +
    "\000\002\020\010\000\002\020\002\000\002\010\010\000" +
    "\002\011\017\000\002\011\014\000\002\005\013\000\002" +
    "\005\007\000\002\005\011\000\002\005\011\000\002\005" +
    "\007\000\002\005\007\000\002\005\011\000\002\005\005" +
    "\000\002\005\006\000\002\005\011\000\002\005\007\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\004\000\002\003\010\000\002\003\006\000\002\003\006" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\003\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\005\000\002\003\006\000\002\003\007" +
    "\000\002\003\010\000\002\003\006\000\002\006\004\000" +
    "\002\006\006\000\002\006\006\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\017\005\001\002\000\004\002\315\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\011\001\002\000\006\002\ufff9\037\ufff9\001" +
    "\002\000\004\061\012\001\002\000\004\011\uffff\001\002" +
    "\000\004\011\014\001\002\000\004\032\015\001\002\000" +
    "\004\034\016\001\002\000\004\036\017\001\002\000\004" +
    "\016\020\001\002\000\004\007\021\001\002\000\004\035" +
    "\022\001\002\000\004\041\023\001\002\000\004\042\024" +
    "\001\002\000\004\061\025\001\002\000\004\010\026\001" +
    "\002\000\004\011\027\001\002\000\056\005\ufffe\007\ufffe" +
    "\011\ufffe\012\ufffe\020\ufffe\025\ufffe\026\ufffe\031\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe" +
    "\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067" +
    "\ufffe\001\002\000\056\005\051\007\041\011\040\012\ufffb" +
    "\020\037\025\034\026\032\031\054\052\045\053\033\054" +
    "\031\055\055\056\060\057\047\060\044\061\042\062\035" +
    "\063\050\064\046\065\052\066\036\067\043\001\002\000" +
    "\004\007\224\001\002\000\004\007\220\001\002\000\004" +
    "\007\214\001\002\000\036\005\051\007\041\025\034\031" +
    "\054\056\060\057\047\060\044\061\042\062\035\063\050" +
    "\064\046\065\052\066\036\067\043\001\002\000\066\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\041\uffd0\042" +
    "\uffd0\044\uffd0\045\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\001" +
    "\002\000\066\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\001\002\000\004\007\205\001\002\000\056" +
    "\005\051\007\041\011\040\012\ufffb\020\037\025\034\026" +
    "\032\031\054\052\045\053\033\054\031\055\055\056\060" +
    "\057\047\060\044\061\042\062\035\063\050\064\046\065" +
    "\052\066\036\067\043\001\002\000\040\005\051\007\041" +
    "\015\177\025\034\031\054\056\060\057\047\060\044\061" +
    "\042\062\035\063\050\064\046\065\052\066\036\067\043" +
    "\001\002\000\066\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\001\002\000\066\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\041\uffcb\042\uffcb\044\uffcb\045" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002\000\066\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\041\uffd4\042" +
    "\uffd4\044\uffd4\045\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\001" +
    "\002\000\004\007\166\001\002\000\066\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\041\uffd3\042\uffd3\044\uffd3" +
    "\045\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002\000\004" +
    "\007\163\001\002\000\066\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\041\uffcf\042\uffcf\044\uffcf\045\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\001\002\000\036\005\051\007" +
    "\041\025\034\031\054\056\060\057\047\060\044\061\042" +
    "\062\035\063\050\064\046\065\052\066\036\067\043\001" +
    "\002\000\066\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\041\uffd1\042\uffd1\044\uffd1\045\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\001\002\000\060\005\051\007\041\011\040" +
    "\012\ufffb\020\037\025\034\026\032\031\054\033\ufffb\052" +
    "\045\053\033\054\031\055\055\056\060\057\047\060\044" +
    "\061\042\062\035\063\050\064\046\065\052\066\036\067" +
    "\043\001\002\000\022\013\145\014\144\015\153\036\146" +
    "\047\152\050\150\051\147\061\151\001\002\000\004\007" +
    "\137\001\002\000\004\012\135\001\002\000\024\004\066" +
    "\005\063\006\071\022\073\023\065\024\064\030\116\041" +
    "\120\045\117\001\002\000\004\007\061\001\002\000\036" +
    "\005\051\007\041\025\034\031\054\056\060\057\047\060" +
    "\044\061\042\062\035\063\050\064\046\065\052\066\036" +
    "\067\043\001\002\000\024\004\066\005\063\006\071\022" +
    "\073\023\065\024\064\027\070\030\067\041\072\001\002" +
    "\000\036\005\051\007\041\025\034\031\054\056\060\057" +
    "\047\060\044\061\042\062\035\063\050\064\046\065\052" +
    "\066\036\067\043\001\002\000\036\005\051\007\041\025" +
    "\034\031\054\056\060\057\047\060\044\061\042\062\035" +
    "\063\050\064\046\065\052\066\036\067\043\001\002\000" +
    "\036\005\051\007\041\025\034\031\054\056\060\057\047" +
    "\060\044\061\042\062\035\063\050\064\046\065\052\066" +
    "\036\067\043\001\002\000\036\005\051\007\041\025\034" +
    "\031\054\056\060\057\047\060\044\061\042\062\035\063" +
    "\050\064\046\065\052\066\036\067\043\001\002\000\006" +
    "\043\103\061\102\001\002\000\036\005\051\007\041\025" +
    "\034\031\054\056\060\057\047\060\044\061\042\062\035" +
    "\063\050\064\046\065\052\066\036\067\043\001\002\000" +
    "\036\005\051\007\041\025\034\031\054\056\060\057\047" +
    "\060\044\061\042\062\035\063\050\064\046\065\052\066" +
    "\036\067\043\001\002\000\036\005\051\007\041\025\034" +
    "\031\054\056\060\057\047\060\044\061\042\062\035\063" +
    "\050\064\046\065\052\066\036\067\043\001\002\000\036" +
    "\005\051\007\041\025\034\031\054\056\060\057\047\060" +
    "\044\061\042\062\035\063\050\064\046\065\052\066\036" +
    "\067\043\001\002\000\066\004\066\005\063\006\071\007" +
    "\uffd9\010\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9" +
    "\030\067\031\uffd9\041\072\042\uffd9\044\uffd9\045\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\001\002\000\024\004\066\005" +
    "\063\006\071\022\073\023\065\024\064\030\067\041\072" +
    "\042\076\001\002\000\066\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\066\uffc6\067\uffc6\001\002\000\066\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\027\uffde\030\067\031\uffde\041\uffde\042\uffde\044" +
    "\uffde\045\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\001\002\000" +
    "\024\004\066\005\063\006\071\010\101\022\073\023\065" +
    "\024\064\030\067\041\072\001\002\000\066\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\027\uffd7\030\uffd7\031\uffd7\041\uffd7\042\uffd7\044" +
    "\uffd7\045\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\001\002\000" +
    "\004\007\104\001\002\000\066\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\022\uffca\023\uffca\024\uffca\025\uffca\027" +
    "\uffca\030\uffca\031\uffca\041\uffca\042\uffca\044\uffca\045\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064" +
    "\uffca\065\uffca\066\uffca\067\uffca\001\002\000\042\005\ufff4" +
    "\007\ufff4\010\ufff4\025\ufff4\027\ufff4\031\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\067\ufff4\001\002\000\042\005\051\007\041\010" +
    "\110\025\034\027\107\031\054\056\060\057\047\060\044" +
    "\061\042\062\035\063\050\064\046\065\052\066\036\067" +
    "\043\001\002\000\060\004\066\005\063\006\071\007\ufff5" +
    "\010\ufff5\022\073\023\065\024\064\025\ufff5\027\ufff5\030" +
    "\067\031\ufff5\041\072\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\001" +
    "\002\000\036\005\051\007\041\025\034\031\054\056\060" +
    "\057\047\060\044\061\042\062\035\063\050\064\046\065" +
    "\052\066\036\067\043\001\002\000\066\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\041\uffc7\042\uffc7\044\uffc7" +
    "\045\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063" +
    "\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\001\002\000\060" +
    "\004\066\005\063\006\071\007\ufff6\010\ufff6\022\073\023" +
    "\065\024\064\025\ufff6\027\ufff6\030\067\031\ufff6\041\072" +
    "\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064" +
    "\ufff6\065\ufff6\066\ufff6\067\ufff6\001\002\000\066\004\uffdd" +
    "\005\uffdd\006\071\007\uffdd\010\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\030\067\031\uffdd\041\072\042\uffdd" +
    "\044\uffdd\045\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\001\002" +
    "\000\066\004\066\005\063\006\071\007\uffdb\010\uffdb\022" +
    "\073\023\uffdb\024\uffdb\025\uffdb\027\uffdb\030\067\031\uffdb" +
    "\041\072\042\uffdb\044\uffdb\045\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\001\002\000\066\004\066\005\063\006\071\007" +
    "\uffda\010\uffda\022\073\023\065\024\uffda\025\uffda\027\uffda" +
    "\030\067\031\uffda\041\072\042\uffda\044\uffda\045\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\001\002\000\066\004\uffdc\005" +
    "\uffdc\006\071\007\uffdc\010\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\027\uffdc\030\067\031\uffdc\041\072\042\uffdc\044" +
    "\uffdc\045\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002\000" +
    "\006\043\103\061\130\001\002\000\036\005\051\007\041" +
    "\025\034\031\054\056\060\057\047\060\044\061\042\062" +
    "\035\063\050\064\046\065\052\066\036\067\043\001\002" +
    "\000\036\005\051\007\041\025\034\031\054\056\060\057" +
    "\047\060\044\061\042\062\035\063\050\064\046\065\052" +
    "\066\036\067\043\001\002\000\024\004\066\005\063\006" +
    "\071\022\073\023\065\024\064\030\067\041\072\042\122" +
    "\001\002\000\024\004\uffc6\005\uffc6\006\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\030\uffc6\041\uffc6\045\123\001\002\000\036" +
    "\005\051\007\041\025\034\031\054\056\060\057\047\060" +
    "\044\061\042\062\035\063\050\064\046\065\052\066\036" +
    "\067\043\001\002\000\024\004\066\005\063\006\071\022" +
    "\073\023\065\024\064\030\067\041\072\044\125\001\002" +
    "\000\062\005\uffe0\007\uffe0\011\uffe0\012\uffe0\020\uffe0\021" +
    "\uffe0\025\uffe0\026\uffe0\031\uffe0\033\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\001\002" +
    "\000\024\004\066\005\063\006\071\022\073\023\065\024" +
    "\064\030\067\041\072\044\127\001\002\000\062\005\uffe1" +
    "\007\uffe1\011\uffe1\012\uffe1\020\uffe1\021\uffe1\025\uffe1\026" +
    "\uffe1\031\uffe1\033\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000\004\007\131" +
    "\001\002\000\042\005\ufff4\007\ufff4\010\ufff4\025\ufff4\027" +
    "\ufff4\031\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\001\002\000" +
    "\042\005\051\007\041\010\133\025\034\027\107\031\054" +
    "\056\060\057\047\060\044\061\042\062\035\063\050\064" +
    "\046\065\052\066\036\067\043\001\002\000\026\004\uffc7" +
    "\005\uffc7\006\uffc7\022\uffc7\023\uffc7\024\uffc7\030\uffc7\041" +
    "\uffc7\044\134\045\uffc7\001\002\000\062\005\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\020\uffe3\021\uffe3\025\uffe3\026\uffe3\031" +
    "\uffe3\033\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065" +
    "\uffe3\066\uffe3\067\uffe3\001\002\000\004\012\136\001\002" +
    "\000\006\002\ufffd\037\ufffd\001\002\000\036\005\051\007" +
    "\041\025\034\031\054\056\060\057\047\060\044\061\042" +
    "\062\035\063\050\064\046\065\052\066\036\067\043\001" +
    "\002\000\024\004\066\005\063\006\071\010\141\022\073" +
    "\023\065\024\064\030\067\041\072\001\002\000\004\044" +
    "\142\001\002\000\062\005\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\020\uffe8\021\uffe8\025\uffe8\026\uffe8\031\uffe8\033\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\001\002\000\004\041\156\001\002\000\006\041\uffc0" +
    "\061\uffc0\001\002\000\006\041\uffc2\061\uffc2\001\002\000" +
    "\006\041\uffbf\061\uffbf\001\002\000\006\041\uffbc\061\uffbc" +
    "\001\002\000\006\041\uffbd\061\uffbd\001\002\000\006\007" +
    "\154\041\uffbb\001\002\000\006\041\uffbe\061\uffbe\001\002" +
    "\000\006\041\uffc1\061\uffc1\001\002\000\004\010\155\001" +
    "\002\000\066\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\041\uffc9\042\uffc9\044\uffc9\045\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\001\002\000\036\005\051\007\041\025\034" +
    "\031\054\056\060\057\047\060\044\061\042\062\035\063" +
    "\050\064\046\065\052\066\036\067\043\001\002\000\024" +
    "\004\066\005\063\006\071\022\073\023\065\024\064\030" +
    "\067\041\072\042\160\001\002\000\066\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\041\uffc8\042\uffc8\044\uffc8" +
    "\045\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\001\002\000\006" +
    "\012\ufffc\033\ufffc\001\002\000\066\004\uffd8\005\uffd8\006" +
    "\071\007\uffd8\010\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\027\uffd8\030\067\031\uffd8\041\072\042\uffd8\044\uffd8\045" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\036\005" +
    "\051\007\041\025\034\031\054\056\060\057\047\060\044" +
    "\061\042\062\035\063\050\064\046\065\052\066\036\067" +
    "\043\001\002\000\024\004\066\005\063\006\071\010\165" +
    "\022\073\023\065\024\064\030\067\041\072\001\002\000" +
    "\066\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\041" +
    "\uffd6\042\uffd6\044\uffd6\045\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067" +
    "\uffd6\001\002\000\036\005\051\007\041\025\034\031\054" +
    "\056\060\057\047\060\044\061\042\062\035\063\050\064" +
    "\046\065\052\066\036\067\043\001\002\000\024\004\066" +
    "\005\063\006\071\022\073\023\065\024\064\027\170\030" +
    "\067\041\072\001\002\000\036\005\051\007\041\025\034" +
    "\031\054\056\060\057\047\060\044\061\042\062\035\063" +
    "\050\064\046\065\052\066\036\067\043\001\002\000\024" +
    "\004\066\005\063\006\071\022\073\023\065\024\064\027" +
    "\172\030\067\041\072\001\002\000\036\005\051\007\041" +
    "\025\034\031\054\056\060\057\047\060\044\061\042\062" +
    "\035\063\050\064\046\065\052\066\036\067\043\001\002" +
    "\000\024\004\066\005\063\006\071\010\174\022\073\023" +
    "\065\024\064\030\067\041\072\001\002\000\004\044\175" +
    "\001\002\000\062\005\uffe9\007\uffe9\011\uffe9\012\uffe9\020" +
    "\uffe9\021\uffe9\025\uffe9\026\uffe9\031\uffe9\033\uffe9\052\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9" +
    "\001\002\000\024\004\066\005\063\006\071\010\202\022" +
    "\073\023\065\024\064\030\067\041\072\001\002\000\004" +
    "\010\200\001\002\000\036\005\051\007\041\025\034\031" +
    "\054\056\060\057\047\060\044\061\042\062\035\063\050" +
    "\064\046\065\052\066\036\067\043\001\002\000\066\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\027\uffd5\030\067\031\uffd5\041\uffd5\042" +
    "\uffd5\044\uffd5\045\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\001" +
    "\002\000\066\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce\031" +
    "\uffce\041\uffce\042\uffce\044\uffce\045\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066" +
    "\uffce\067\uffce\001\002\000\004\012\204\001\002\000\062" +
    "\005\uffe2\007\uffe2\011\uffe2\012\uffe2\020\uffe2\021\uffe2\025" +
    "\uffe2\026\uffe2\031\uffe2\033\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\036" +
    "\005\051\007\041\025\034\031\054\056\060\057\047\060" +
    "\044\061\042\062\035\063\050\064\046\065\052\066\036" +
    "\067\043\001\002\000\024\004\066\005\063\006\071\010" +
    "\207\022\073\023\065\024\064\030\067\041\072\001\002" +
    "\000\054\005\051\007\041\011\040\020\037\025\034\026" +
    "\032\031\054\052\045\053\033\054\031\055\055\056\060" +
    "\057\047\060\044\061\042\062\035\063\050\064\046\065" +
    "\052\066\036\067\043\001\002\000\062\005\uffe5\007\uffe5" +
    "\011\uffe5\012\uffe5\020\uffe5\021\211\025\uffe5\026\uffe5\031" +
    "\uffe5\033\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\001\002\000\054\005\051\007\041" +
    "\011\040\020\037\025\034\026\032\031\054\052\045\053" +
    "\033\054\031\055\055\056\060\057\047\060\044\061\042" +
    "\062\035\063\050\064\046\065\052\066\036\067\043\001" +
    "\002\000\062\005\uffe6\007\uffe6\011\uffe6\012\uffe6\020\uffe6" +
    "\021\uffe6\025\uffe6\026\uffe6\031\uffe6\033\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\001" +
    "\002\000\066\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\067\031" +
    "\uffcd\041\uffcd\042\uffcd\044\uffcd\045\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\001\002\000\036\005\051\007\041\025\034" +
    "\031\054\056\060\057\047\060\044\061\042\062\035\063" +
    "\050\064\046\065\052\066\036\067\043\001\002\000\024" +
    "\004\066\005\063\006\071\010\216\022\073\023\065\024" +
    "\064\030\067\041\072\001\002\000\004\044\217\001\002" +
    "\000\062\005\uffdf\007\uffdf\011\uffdf\012\uffdf\020\uffdf\021" +
    "\uffdf\025\uffdf\026\uffdf\031\uffdf\033\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002" +
    "\000\036\005\051\007\041\025\034\031\054\056\060\057" +
    "\047\060\044\061\042\062\035\063\050\064\046\065\052" +
    "\066\036\067\043\001\002\000\024\004\066\005\063\006" +
    "\071\010\222\022\073\023\065\024\064\030\067\041\072" +
    "\001\002\000\054\005\051\007\041\011\040\020\037\025" +
    "\034\026\032\031\054\052\045\053\033\054\031\055\055" +
    "\056\060\057\047\060\044\061\042\062\035\063\050\064" +
    "\046\065\052\066\036\067\043\001\002\000\062\005\uffe4" +
    "\007\uffe4\011\uffe4\012\uffe4\020\uffe4\021\uffe4\025\uffe4\026" +
    "\uffe4\031\uffe4\033\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\066\uffe4\067\uffe4\001\002\000\036\005\051" +
    "\007\041\025\034\031\054\056\060\057\047\060\044\061" +
    "\042\062\035\063\050\064\046\065\052\066\036\067\043" +
    "\001\002\000\024\004\066\005\063\006\071\022\073\023" +
    "\065\024\064\027\226\030\067\041\072\001\002\000\036" +
    "\005\051\007\041\025\034\031\054\056\060\057\047\060" +
    "\044\061\042\062\035\063\050\064\046\065\052\066\036" +
    "\067\043\001\002\000\024\004\066\005\063\006\071\010" +
    "\230\022\073\023\065\024\064\030\067\041\072\001\002" +
    "\000\004\044\231\001\002\000\062\005\uffe7\007\uffe7\011" +
    "\uffe7\012\uffe7\020\uffe7\021\uffe7\025\uffe7\026\uffe7\031\uffe7" +
    "\033\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\001\002\000\006\002\000\037\234\001" +
    "\002\000\006\002\ufffa\037\ufffa\001\002\000\004\061\235" +
    "\001\002\000\004\011\236\001\002\000\026\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\032\uffed\036\uffed\047\uffed\050\uffed" +
    "\051\uffed\061\uffed\001\002\000\026\012\ufff7\013\145\014" +
    "\241\015\153\032\ufff7\036\146\047\244\050\150\051\147" +
    "\061\243\001\002\000\004\061\313\001\002\000\006\041" +
    "\307\061\uffc0\001\002\000\006\012\252\032\253\001\002" +
    "\000\004\061\uffbb\001\002\000\006\041\245\061\uffbe\001" +
    "\002\000\004\042\246\001\002\000\004\061\247\001\002" +
    "\000\004\044\250\001\002\000\100\005\uffee\007\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\020\uffee\025\uffee" +
    "\026\uffee\031\uffee\032\uffee\033\uffee\036\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\067\uffee\001\002\000\006\012\ufff8\032\ufff8" +
    "\001\002\000\006\002\uffec\037\uffec\001\002\000\022\013" +
    "\145\014\144\015\153\036\146\047\152\050\150\051\147" +
    "\061\243\001\002\000\004\061\255\001\002\000\004\007" +
    "\256\001\002\000\026\010\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\027\ufff1\036\ufff1\047\ufff1\050\ufff1\051\ufff1\061\ufff1\001" +
    "\002\000\026\010\264\013\145\014\261\015\153\027\263" +
    "\036\146\047\262\050\150\051\147\061\243\001\002\000" +
    "\004\061\306\001\002\000\006\041\303\061\uffc0\001\002" +
    "\000\006\041\300\061\uffbe\001\002\000\022\013\145\014" +
    "\261\015\153\036\146\047\262\050\150\051\147\061\243" +
    "\001\002\000\004\011\266\001\002\000\026\010\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\027\ufff2\036\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\061\ufff2\001\002\000\076\005\uffed\007\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\025\uffed" +
    "\026\uffed\031\uffed\033\uffed\036\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\001\002\000\076\005\051\007\041\011\040" +
    "\012\ufffb\013\145\014\241\015\153\020\037\025\034\026" +
    "\032\031\054\033\ufffb\036\146\047\244\050\150\051\147" +
    "\052\045\053\033\054\031\055\055\056\060\057\047\060" +
    "\044\061\270\062\035\063\050\064\046\065\052\066\036" +
    "\067\043\001\002\000\026\004\uffcc\005\uffcc\006\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\030\uffcc\041\uffcc\045\uffcc\061\uffbb" +
    "\001\002\000\006\012\273\033\272\001\002\000\036\005" +
    "\051\007\041\025\034\031\054\056\060\057\047\060\044" +
    "\061\042\062\035\063\050\064\046\065\052\066\036\067" +
    "\043\001\002\000\006\012\uffea\032\uffea\001\002\000\024" +
    "\004\066\005\063\006\071\022\073\023\065\024\064\030" +
    "\067\041\072\044\275\001\002\000\004\012\276\001\002" +
    "\000\006\012\uffeb\032\uffeb\001\002\000\026\010\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\027\ufff3\036\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\061\ufff3\001\002\000\004\042\301\001\002\000" +
    "\004\061\302\001\002\000\026\010\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\027\uffc4\036\uffc4\047\uffc4\050\uffc4\051\uffc4\061" +
    "\uffc4\001\002\000\004\042\304\001\002\000\004\061\305" +
    "\001\002\000\026\010\uffc3\013\uffc3\014\uffc3\015\uffc3\027" +
    "\uffc3\036\uffc3\047\uffc3\050\uffc3\051\uffc3\061\uffc3\001\002" +
    "\000\026\010\uffc5\013\uffc5\014\uffc5\015\uffc5\027\uffc5\036" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\061\uffc5\001\002\000\004" +
    "\042\310\001\002\000\004\061\311\001\002\000\004\044" +
    "\312\001\002\000\100\005\uffef\007\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\020\uffef\025\uffef\026\uffef\031" +
    "\uffef\032\uffef\033\uffef\036\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060" +
    "\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef" +
    "\067\uffef\001\002\000\004\044\314\001\002\000\100\005" +
    "\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\020\ufff0\025\ufff0\026\ufff0\031\ufff0\032\ufff0\033\ufff0\036" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\007\001\001" +
    "\000\004\014\231\001\001\000\002\001\001\000\004\021" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\027\001\001\000\010\003\056\005\052\013\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\056\005\052\013" +
    "\202\001\001\000\004\003\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\161\001\001\000\002\001\001\000\010\003\056\005" +
    "\052\013\160\001\001\000\004\004\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\061\001\001\000\002\001\001\000\004" +
    "\003\114\001\001\000\004\003\113\001\001\000\004\003" +
    "\112\001\001\000\004\003\111\001\001\000\002\001\001" +
    "\000\004\003\077\001\001\000\004\003\076\001\001\000" +
    "\004\003\074\001\001\000\004\003\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\104\001\001\000\004\003" +
    "\105\001\001\000\002\001\001\000\004\003\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\125\001\001\000\004\003\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\131" +
    "\001\001\000\004\003\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\166\001\001\000\002" +
    "\001\001\000\004\003\170\001\001\000\002\001\001\000" +
    "\004\003\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\205\001" +
    "\001\000\002\001\001\000\006\003\056\005\207\001\001" +
    "\000\002\001\001\000\006\003\056\005\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\220\001\001\000\002\001\001\000\006\003\056" +
    "\005\222\001\001\000\002\001\001\000\004\003\224\001" +
    "\001\000\002\001\001\000\004\003\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\236\001\001\000\006\004\237\016" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\256\001\001\000\006\004\257\006\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\257\006\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\266\001\001\000\012\003\056\004\237" +
    "\005\052\013\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String programName;


    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error",
                                          tok.line, tok.pos);
    }

    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] "
                               + message + " at " + tok.toString() );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Type ::= ID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ClassType(op.line, op.pos, op.toString()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Type ::= VOID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new VoidType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Type ::= INT 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Type ::= BYTE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Type ::= BOOLEAN 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new BoolType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FormalVar ::= INT LBRACKET RBRACKET ID 
            {
              Formal RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Formal(name.line, name.pos, new IntArrayType(op.line, op.pos), name.toString()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalVar",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FormalVar ::= MEGGYCOLOR LBRACKET RBRACKET ID 
            {
              Formal RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Formal(name.line, name.pos, new ColorArrayType(op.line, op.pos), name.toString()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalVar",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FormalVar ::= Type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Formal(name.line, name.pos, t, name.toString()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalVar",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expression ::= Expression LBRACKET Expression RBRACKET 
            {
              IExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new ArrayExp(op.line, op.pos, exp1, exp2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= Expression DOT ID LPAREN ExpressionList RPAREN 
            {
              IExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue dot = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new CallExp(dot.line, dot.pos, exp1, id.toString(), explist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= NEW Type LBRACKET Expression RBRACKET 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new NewArrayExp(op.line, op.pos, t, exp1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new NewExp(op.line, op.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Expression DOT LENGTH 
            {
              IExp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LengthExp(op.line, op.pos, exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= THIS 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ThisLiteral(op.line, op.pos, op.lexeme, op.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= ID 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(id.line, id.pos, id.toString()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= NOT Expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NotExp(op.line, op.pos, exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= LPAREN Expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = exp; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= FALSE 
            {
              IExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue val = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(val.line, val.pos, val.toString(), val.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= TRUE 
            {
              IExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue val = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(val.line, val.pos, val.toString(), val.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int buttvalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int buttvalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue buttval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(buttval.line, buttval.pos, buttval.toString(), buttval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int tonevalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tonevalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue toneval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneLiteral(toneval.line, toneval.pos, toneval.toString(), toneval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int colorvalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int colorvalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue colorval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(colorval.line, colorval.pos, colorval.toString(), colorval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue intval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(intval.line, intval.pos, intval.toString(), intval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= LPAREN BYTE RPAREN Expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(op.line, op.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= MEGGYCHECKBUTTON LPAREN Expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(op.line, op.pos, exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= MEGGYGETPIXEL LPAREN Expression COMMA Expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyGetPixel(op.line, op.pos, exp1, exp2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= MINUS Expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(op.line, op.pos, exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression LT Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LtExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression AND Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new AndExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression EQUAL Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new EqualExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression MINUS Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MinusExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression PLUS Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new PlusExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression TIMES Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MulExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= MEGGYSETAUXLEDS LPAREN Expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetAuxLEDs(op.line, op.pos, exp);
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= Expression LBRACKET Expression RBRACKET ASSIGN Expression SEMI 
            {
              IStatement RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp exp2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new ArrayAssignStatement(op.line, op.pos, (IdLiteral)exp1, exp2, exp3); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= Expression ASSIGN Expression SEMI 
            {
              IStatement RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new AssignStatement(op.line, op.pos, exp1.toString(), exp2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= LBRACE StatementList RBRACE 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new BlockStatement(op.line, op.pos, stmtlist);  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= Expression DOT ID LPAREN ExpressionList RPAREN SEMI 
            {
              IStatement RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue dot = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new CallStatement(dot.line, dot.pos, exp1, id.toString(), explist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(op.line, op.pos, exp1, stmt1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= IF LPAREN Expression RPAREN Statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line, op.pos, exp, stmt, (IStatement)null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement stmt1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmt2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmt2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line, op.pos, exp1, stmt1, stmt2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= MEGGYTONESTART LPAREN Expression COMMA Expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyToneStart(op.line, op.pos, exp1, exp2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= MEGGYDELAY LPAREN Expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyDelay(op.line, op.pos, exp1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= MEGGYSETPIXEL LPAREN Expression COMMA Expression COMMA Expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp exp2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetPixel(op.line, op.pos, exp1, exp2, exp3); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclration ::= PUBLIC Type ID LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RBRACE 
            {
              MethodDecl RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IType type = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int formallistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int formallistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		List<Formal> formallist = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MethodDecl(op.line, op.pos, type, name.toString(), formallist, varlist, stmtlist, (IExp)null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MethodDeclration",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclration ::= PUBLIC Type ID LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMI RBRACE 
            {
              MethodDecl RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		IType type = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int formallistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int formallistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		List<Formal> formallist = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MethodDecl(op.line, op.pos, type, name.toString(), formallist, varlist, stmtlist, exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MethodDeclration",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassDeclaration ::= CLASS ID LBRACE VarDeclList MethodDeclrationList RBRACE 
            {
              TopClassDecl RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int methodlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<MethodDecl> methodlist = (List<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new TopClassDecl(op.line, op.pos, name.toString(), varlist, methodlist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclList ::= 
            {
              List<VarDecl> RESULT =null;
		 RESULT = new LinkedList<VarDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclList ::= VarDeclList MEGGYCOLOR LBRACKET RBRACKET ID SEMI 
            {
              List<VarDecl> RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
                  //ColorArrayType t = new ColorArrayType(op.line, op.pos);
                  varlist.add(new VarDecl(name.line, name.pos, new ColorArrayType(op.line, op.pos), name.toString()));
                  RESULT=varlist;
              
              CUP$mj$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclList ::= VarDeclList INT LBRACKET RBRACKET ID SEMI 
            {
              List<VarDecl> RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
                  //IntArrayType t = new IntArrayType(op.line, op.pos);
                  varlist.add(new VarDecl(name.line, name.pos, new IntArrayType(op.line, op.pos) , name.toString()));
                  RESULT=varlist;
              
              CUP$mj$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclList ::= VarDeclList Type ID SEMI 
            {
              List<VarDecl> RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
                  varlist.add(new VarDecl(name.line, name.pos, t, name.toString()));
                  RESULT=varlist;
              
              CUP$mj$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FormalList ::= 
            {
              List<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalList",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalList ::= FormalList FormalVar 
            {
              List<Formal> RESULT =null;
		int formallistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int formallistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<Formal> formallist = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int formalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal formal = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(formal!=null) {formallist.add(formal);} RESULT=formallist; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalList",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalList ::= FormalList COMMA FormalVar 
            {
              List<Formal> RESULT =null;
		int formallistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int formallistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<Formal> formallist = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int formalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal formal = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(formal!=null) {formallist.add(formal);} RESULT=formallist; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalList",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExpressionList ::= 
            {
              LinkedList<IExp> RESULT =null;
		 RESULT = new LinkedList<IExp>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ExpressionList",11, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ExpressionList ::= ExpressionList Expression 
            {
              LinkedList<IExp> RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  if(exp!=null) {explist.add(exp);} RESULT = explist;  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ExpressionList",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              LinkedList<IExp> RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  if(exp!=null) {explist.add(exp);} RESULT=explist;  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ExpressionList",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclrationList ::= 
            {
              List<MethodDecl> RESULT =null;
		 RESULT = new LinkedList<MethodDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MethodDeclrationList",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclrationList ::= MethodDeclrationList MethodDeclration 
            {
              List<MethodDecl> RESULT =null;
		int methodlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<MethodDecl> methodlist = (List<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int methodleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl method = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(method!=null) {methodlist.add(method);} RESULT = methodlist; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MethodDeclrationList",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassDeclarationList ::= 
            {
              List<IClassDecl> RESULT =null;
		 RESULT = new LinkedList<IClassDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ClassDeclarationList",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDeclarationList ::= ClassDeclarationList ClassDeclaration 
            {
              List<IClassDecl> RESULT =null;
		int classlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int classlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IClassDecl> classlist = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl c = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(c!=null) {classlist.add(c);} RESULT = classlist; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ClassDeclarationList",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // StatementList ::= 
            {
              List<IStatement> RESULT =null;
		 RESULT = new LinkedList<IStatement>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // StatementList ::= Statement StatementList 
            {
              List<IStatement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
                        List list = new LinkedList<IStatement>();
                        if (stmt     != null) {list.add(stmt);}
                        if (stmtlist != null) {list.addAll(stmtlist);}
                        RESULT = list;
                    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MainClass ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 StatementList RBRACE RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-18)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-17)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		SymbolValue main = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
              //System.out.println("END OF FILE");
              RESULT  = new MainClass(op.line, op.pos, name.toString(), param.toString(),  new BlockStatement(op.line, op.pos, stmtlist));
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MainClass",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue main = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;

              //System.out.println(param.toString());
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

                //System.out.println(name.toString());
                String t_name = name.toString() + ".java";

                if (!parser.programName.contains(t_name)){
                    System.err.println("Filename and Program name are different!");
                    System.exit(0);
                }

            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= IMPORT MEGGY SEMI MainClass ClassDeclarationList 
            {
              Program RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue imp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mainclassleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mainclassright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass mainclass = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int classlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int classlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IClassDecl> classlist = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        //System.out.println("PROGRAM");
        RESULT =  new Program(imp.line, imp.pos, mainclass, classlist);

    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

