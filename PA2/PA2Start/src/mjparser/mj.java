
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 24 05:02:44 EST 2019
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast_visitors.DotVisitor;
import ast.node.*;
import ast.visitor.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 24 05:02:44 EST 2019
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\007\000\002\021" +
    "\002\000\002\022\002\000\002\012\025\000\002\013\004" +
    "\000\002\013\002\000\002\014\004\000\002\014\002\000" +
    "\002\016\004\000\002\016\002\000\002\015\005\000\002" +
    "\015\004\000\002\015\002\000\002\017\005\000\002\017" +
    "\004\000\002\017\002\000\002\020\004\000\002\020\002" +
    "\000\002\010\010\000\002\011\017\000\002\011\014\000" +
    "\002\005\013\000\002\005\007\000\002\005\011\000\002" +
    "\005\007\000\002\005\007\000\002\005\011\000\002\005" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\010\000\002\003\006\000\002" +
    "\003\006\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\006\000\002\007\005\000\002\006\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\004\017\005\001\002\000\004\002\226\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\011\001\002\000\006\002\ufff9\037\ufff9\001" +
    "\002\000\004\061\012\001\002\000\004\011\uffff\001\002" +
    "\000\004\011\014\001\002\000\004\032\015\001\002\000" +
    "\004\034\016\001\002\000\004\036\017\001\002\000\004" +
    "\016\020\001\002\000\004\007\021\001\002\000\004\035" +
    "\022\001\002\000\004\041\023\001\002\000\004\042\024" +
    "\001\002\000\004\061\025\001\002\000\004\010\026\001" +
    "\002\000\004\011\027\001\002\000\050\005\ufffe\007\ufffe" +
    "\011\ufffe\012\ufffe\020\ufffe\025\ufffe\026\ufffe\031\ufffe\052" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\064\ufffe\065\ufffe\067\ufffe\001\002\000\050\005" +
    "\ufffb\007\ufffb\011\ufffb\012\ufffb\020\ufffb\025\ufffb\026\ufffb" +
    "\031\ufffb\052\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\067\ufffb\001\002" +
    "\000\050\005\050\007\037\011\040\012\032\020\036\025" +
    "\034\026\033\031\053\052\044\055\054\056\056\057\046" +
    "\060\043\061\041\062\035\063\047\064\045\065\051\067" +
    "\042\001\002\000\004\012\156\001\002\000\004\007\152" +
    "\001\002\000\034\005\050\007\037\025\034\031\053\056" +
    "\056\057\046\060\043\061\041\062\035\063\047\064\045" +
    "\065\051\067\042\001\002\000\056\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\044\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\067\uffd7" +
    "\001\002\000\004\007\143\001\002\000\036\005\050\007" +
    "\037\015\137\025\034\031\053\056\056\057\046\060\043" +
    "\061\041\062\035\063\047\064\045\065\051\067\042\001" +
    "\002\000\050\005\ufffb\007\ufffb\011\ufffb\012\ufffb\020\ufffb" +
    "\025\ufffb\026\ufffb\031\ufffb\052\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\067\ufffb\001\002\000\056\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\044\uffd3\056\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\067\uffd3\001\002" +
    "\000\056\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\044\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\067\uffd2\001\002\000\056\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\027\uffda\030\uffda\031\uffda\044\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065" +
    "\uffda\067\uffda\001\002\000\004\007\124\001\002\000\056" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\044\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\067\uffd9\001\002\000\004\007\121\001\002" +
    "\000\056\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\044\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\067\uffd6\001\002\000\034\005\050" +
    "\007\037\025\034\031\053\056\056\057\046\060\043\061" +
    "\041\062\035\063\047\064\045\065\051\067\042\001\002" +
    "\000\056\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\044\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\067\uffd8\001\002\000\052\005\ufffc" +
    "\007\ufffc\011\ufffc\012\ufffc\020\ufffc\025\ufffc\026\ufffc\031" +
    "\ufffc\033\ufffc\052\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\067\ufffc\001" +
    "\002\000\004\061\115\001\002\000\004\007\111\001\002" +
    "\000\020\004\064\005\066\006\067\022\062\023\065\024" +
    "\063\030\100\001\002\000\004\007\057\001\002\000\034" +
    "\005\050\007\037\025\034\031\053\056\056\057\046\060" +
    "\043\061\041\062\035\063\047\064\045\065\051\067\042" +
    "\001\002\000\020\004\064\005\066\006\067\022\062\023" +
    "\065\024\063\027\061\001\002\000\034\005\050\007\037" +
    "\025\034\031\053\056\056\057\046\060\043\061\041\062" +
    "\035\063\047\064\045\065\051\067\042\001\002\000\034" +
    "\005\050\007\037\025\034\031\053\056\056\057\046\060" +
    "\043\061\041\062\035\063\047\064\045\065\051\067\042" +
    "\001\002\000\034\005\050\007\037\025\034\031\053\056" +
    "\056\057\046\060\043\061\041\062\035\063\047\064\045" +
    "\065\051\067\042\001\002\000\034\005\050\007\037\025" +
    "\034\031\053\056\056\057\046\060\043\061\041\062\035" +
    "\063\047\064\045\065\051\067\042\001\002\000\034\005" +
    "\050\007\037\025\034\031\053\056\056\057\046\060\043" +
    "\061\041\062\035\063\047\064\045\065\051\067\042\001" +
    "\002\000\034\005\050\007\037\025\034\031\053\056\056" +
    "\057\046\060\043\061\041\062\035\063\047\064\045\065" +
    "\051\067\042\001\002\000\034\005\050\007\037\025\034" +
    "\031\053\056\056\057\046\060\043\061\041\062\035\063" +
    "\047\064\045\065\051\067\042\001\002\000\056\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\044\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065" +
    "\uffe4\067\uffe4\001\002\000\056\004\uffe2\005\uffe2\006\067" +
    "\007\uffe2\010\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\044\uffe2\056\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\067\uffe2\001" +
    "\002\000\056\004\064\005\066\006\067\007\uffe1\010\uffe1" +
    "\022\062\023\uffe1\024\uffe1\025\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\044\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\067\uffe1\001\002\000\056\004" +
    "\uffe3\005\uffe3\006\067\007\uffe3\010\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\030\uffe3\031\uffe3\044\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\067\uffe3\001\002\000\056\004\064\005\066\006" +
    "\067\007\uffe0\010\uffe0\022\062\023\065\024\uffe0\025\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\044\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\067\uffe0" +
    "\001\002\000\056\004\064\005\066\006\067\007\uffdf\010" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\044\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\067\uffdf\001\002\000\020" +
    "\004\064\005\066\006\067\010\077\022\062\023\065\024" +
    "\063\001\002\000\056\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\044\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\067\uffdd\001\002\000" +
    "\004\061\101\001\002\000\004\007\102\001\002\000\040" +
    "\005\ufff4\007\ufff4\010\ufff4\025\ufff4\027\ufff4\031\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\067\ufff4\001\002\000\040\005\050\007\037\010" +
    "\106\025\034\027\105\031\053\056\056\057\046\060\043" +
    "\061\041\062\035\063\047\064\045\065\051\067\042\001" +
    "\002\000\052\004\064\005\066\006\067\007\ufff5\010\ufff5" +
    "\022\062\023\065\024\063\025\ufff5\027\ufff5\031\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\067\ufff5\001\002\000\034\005\050\007\037\025" +
    "\034\031\053\056\056\057\046\060\043\061\041\062\035" +
    "\063\047\064\045\065\051\067\042\001\002\000\004\044" +
    "\107\001\002\000\054\005\uffe6\007\uffe6\011\uffe6\012\uffe6" +
    "\020\uffe6\021\uffe6\025\uffe6\026\uffe6\031\uffe6\033\uffe6\052" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\064\uffe6\065\uffe6\067\uffe6\001\002\000\052\004" +
    "\064\005\066\006\067\007\ufff6\010\ufff6\022\062\023\065" +
    "\024\063\025\ufff6\027\ufff6\031\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\067\ufff6" +
    "\001\002\000\034\005\050\007\037\025\034\031\053\056" +
    "\056\057\046\060\043\061\041\062\035\063\047\064\045" +
    "\065\051\067\042\001\002\000\020\004\064\005\066\006" +
    "\067\010\113\022\062\023\065\024\063\001\002\000\004" +
    "\044\114\001\002\000\054\005\uffea\007\uffea\011\uffea\012" +
    "\uffea\020\uffea\021\uffea\025\uffea\026\uffea\031\uffea\033\uffea" +
    "\052\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\067\uffea\001\002\000\004" +
    "\007\116\001\002\000\004\010\117\001\002\000\056\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\044\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\067\uffd1\001\002\000\056\004\uffde\005\uffde\006" +
    "\067\007\uffde\010\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\027\uffde\030\uffde\031\uffde\044\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\067\uffde" +
    "\001\002\000\034\005\050\007\037\025\034\031\053\056" +
    "\056\057\046\060\043\061\041\062\035\063\047\064\045" +
    "\065\051\067\042\001\002\000\020\004\064\005\066\006" +
    "\067\010\123\022\062\023\065\024\063\001\002\000\056" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc\031\uffdc\044\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\067\uffdc\001\002\000\034\005\050\007\037" +
    "\025\034\031\053\056\056\057\046\060\043\061\041\062" +
    "\035\063\047\064\045\065\051\067\042\001\002\000\020" +
    "\004\064\005\066\006\067\022\062\023\065\024\063\027" +
    "\126\001\002\000\034\005\050\007\037\025\034\031\053" +
    "\056\056\057\046\060\043\061\041\062\035\063\047\064" +
    "\045\065\051\067\042\001\002\000\020\004\064\005\066" +
    "\006\067\022\062\023\065\024\063\027\130\001\002\000" +
    "\034\005\050\007\037\025\034\031\053\056\056\057\046" +
    "\060\043\061\041\062\035\063\047\064\045\065\051\067" +
    "\042\001\002\000\020\004\064\005\066\006\067\010\132" +
    "\022\062\023\065\024\063\001\002\000\004\044\133\001" +
    "\002\000\054\005\uffeb\007\uffeb\011\uffeb\012\uffeb\020\uffeb" +
    "\021\uffeb\025\uffeb\026\uffeb\031\uffeb\033\uffeb\052\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\067\uffeb\001\002\000\050\005\050\007" +
    "\037\011\040\012\135\020\036\025\034\026\033\031\053" +
    "\052\044\055\054\056\056\057\046\060\043\061\041\062" +
    "\035\063\047\064\045\065\051\067\042\001\002\000\054" +
    "\005\uffe5\007\uffe5\011\uffe5\012\uffe5\020\uffe5\021\uffe5\025" +
    "\uffe5\026\uffe5\031\uffe5\033\uffe5\052\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065" +
    "\uffe5\067\uffe5\001\002\000\020\004\064\005\066\006\067" +
    "\010\142\022\062\023\065\024\063\001\002\000\004\010" +
    "\140\001\002\000\034\005\050\007\037\025\034\031\053" +
    "\056\056\057\046\060\043\061\041\062\035\063\047\064" +
    "\045\065\051\067\042\001\002\000\056\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\044\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\067" +
    "\uffdb\001\002\000\056\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\044\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\067\uffd5\001\002\000" +
    "\034\005\050\007\037\025\034\031\053\056\056\057\046" +
    "\060\043\061\041\062\035\063\047\064\045\065\051\067" +
    "\042\001\002\000\020\004\064\005\066\006\067\010\145" +
    "\022\062\023\065\024\063\001\002\000\046\005\050\007" +
    "\037\011\040\020\036\025\034\026\033\031\053\052\044" +
    "\055\054\056\056\057\046\060\043\061\041\062\035\063" +
    "\047\064\045\065\051\067\042\001\002\000\054\005\uffe8" +
    "\007\uffe8\011\uffe8\012\uffe8\020\uffe8\021\147\025\uffe8\026" +
    "\uffe8\031\uffe8\033\uffe8\052\uffe8\055\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\067" +
    "\uffe8\001\002\000\046\005\050\007\037\011\040\020\036" +
    "\025\034\026\033\031\053\052\044\055\054\056\056\057" +
    "\046\060\043\061\041\062\035\063\047\064\045\065\051" +
    "\067\042\001\002\000\054\005\uffe9\007\uffe9\011\uffe9\012" +
    "\uffe9\020\uffe9\021\uffe9\025\uffe9\026\uffe9\031\uffe9\033\uffe9" +
    "\052\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\067\uffe9\001\002\000\056" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\044\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\067\uffd4\001\002\000\034\005\050\007\037" +
    "\025\034\031\053\056\056\057\046\060\043\061\041\062" +
    "\035\063\047\064\045\065\051\067\042\001\002\000\020" +
    "\004\064\005\066\006\067\010\154\022\062\023\065\024" +
    "\063\001\002\000\046\005\050\007\037\011\040\020\036" +
    "\025\034\026\033\031\053\052\044\055\054\056\056\057" +
    "\046\060\043\061\041\062\035\063\047\064\045\065\051" +
    "\067\042\001\002\000\054\005\uffe7\007\uffe7\011\uffe7\012" +
    "\uffe7\020\uffe7\021\uffe7\025\uffe7\026\uffe7\031\uffe7\033\uffe7" +
    "\052\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\065\uffe7\067\uffe7\001\002\000\006" +
    "\002\ufffd\037\ufffd\001\002\000\006\002\000\037\161\001" +
    "\002\000\006\002\ufffa\037\ufffa\001\002\000\004\061\162" +
    "\001\002\000\004\011\163\001\002\000\024\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\032\uffef\036\uffef\047\uffef\050\uffef" +
    "\051\uffef\001\002\000\024\012\ufff7\013\171\014\166\015" +
    "\176\032\ufff7\036\172\047\175\050\174\051\173\001\002" +
    "\000\004\061\224\001\002\000\004\061\uffcc\001\002\000" +
    "\072\005\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\020\ufff0\025\ufff0\026\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\036\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\065\ufff0\067\ufff0\001\002\000\006\012\200\032\201" +
    "\001\002\000\004\061\uffce\001\002\000\004\061\uffcb\001" +
    "\002\000\004\061\uffc8\001\002\000\004\061\uffc9\001\002" +
    "\000\004\061\uffca\001\002\000\004\061\uffcd\001\002\000" +
    "\006\012\ufff8\032\ufff8\001\002\000\006\002\uffee\037\uffee" +
    "\001\002\000\020\013\171\014\166\015\176\036\172\047" +
    "\175\050\174\051\173\001\002\000\004\061\203\001\002" +
    "\000\004\007\204\001\002\000\024\010\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\027\ufff1\036\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\001\002\000\024\010\210\013\171\014\166\015\176\027" +
    "\207\036\172\047\175\050\174\051\173\001\002\000\004" +
    "\061\223\001\002\000\020\013\171\014\166\015\176\036" +
    "\172\047\175\050\174\051\173\001\002\000\004\011\212" +
    "\001\002\000\024\010\ufff2\013\ufff2\014\ufff2\015\ufff2\027" +
    "\ufff2\036\ufff2\047\ufff2\050\ufff2\051\ufff2\001\002\000\070" +
    "\005\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\020\uffef\025\uffef\026\uffef\031\uffef\033\uffef\036\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\055\uffef\056\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef" +
    "\067\uffef\001\002\000\070\005\ufffb\007\ufffb\011\ufffb\012" +
    "\ufffb\013\171\014\166\015\176\020\ufffb\025\ufffb\026\ufffb" +
    "\031\ufffb\033\ufffb\036\172\047\175\050\174\051\173\052" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\067\ufffb\001\002\000\052\005" +
    "\050\007\037\011\040\012\215\020\036\025\034\026\033" +
    "\031\053\033\216\052\044\055\054\056\056\057\046\060" +
    "\043\061\041\062\035\063\047\064\045\065\051\067\042" +
    "\001\002\000\006\012\uffec\032\uffec\001\002\000\034\005" +
    "\050\007\037\025\034\031\053\056\056\057\046\060\043" +
    "\061\041\062\035\063\047\064\045\065\051\067\042\001" +
    "\002\000\020\004\064\005\066\006\067\022\062\023\065" +
    "\024\063\044\220\001\002\000\004\012\221\001\002\000" +
    "\006\012\uffed\032\uffed\001\002\000\024\010\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\027\ufff3\036\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\001\002\000\024\010\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\027\uffcf\036\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002\000" +
    "\004\044\225\001\002\000\072\005\uffd0\007\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\020\uffd0\025\uffd0\026" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\036\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\067\uffd0\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\007\001\001" +
    "\000\004\014\156\001\001\000\002\001\001\000\004\021" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\027\001\001\000\004\013\030\001\001\000\006" +
    "\003\054\005\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\135\001\001\000\004\013\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\057\001\001" +
    "\000\002\001\001\000\004\003\075\001\001\000\004\003" +
    "\074\001\001\000\004\003\073\001\001\000\004\003\072" +
    "\001\001\000\004\003\071\001\001\000\004\003\070\001" +
    "\001\000\004\003\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\102\001" +
    "\001\000\004\003\103\001\001\000\002\001\001\000\004" +
    "\003\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\124\001\001\000\002\001\001\000\004\003\126" +
    "\001\001\000\002\001\001\000\004\003\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\054\005\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\143\001\001\000" +
    "\002\001\001\000\006\003\054\005\145\001\001\000\002" +
    "\001\001\000\006\003\054\005\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\152\001\001\000\002" +
    "\001\001\000\006\003\054\005\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\163\001\001\000\010\004\164\007\166\016\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\204\001\001\000\006\004\205\006\210\001\001" +
    "\000\002\001\001\000\006\004\205\006\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\212\001\001" +
    "\000\010\004\164\007\166\013\213\001\001\000\006\003" +
    "\054\005\051\001\001\000\002\001\001\000\004\003\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String programName;


    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error",
                                          tok.line, tok.pos);
    }

    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] "
                               + message + " at " + tok.toString() );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorArrayType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Type ::= VOID 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new VoidType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Type ::= INT 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Type ::= BYTE 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= BOOLEAN 
            {
              IType RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new BoolType(op.line, op.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalVar ::= Type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Formal(name.line, name.pos, t, name.toString()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalVar",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VariableDecl ::= Type ID SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new VarDecl(name.line, name.pos, t, name.toString()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("VariableDecl",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new NewExp(op.line, op.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= THIS 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ThisLiteral(op.line, op.pos, op.lexeme, op.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= ID 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(id.line, id.pos, id.toString()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= NOT Expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NotExp(op.line, op.pos, exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= LPAREN Expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = exp; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= FALSE 
            {
              IExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue val = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(val.line, val.pos, val.toString(), val.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= TRUE 
            {
              IExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue val = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(val.line, val.pos, val.toString(), val.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int buttvalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int buttvalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue buttval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(buttval.line, buttval.pos, buttval.toString(), buttval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int colorvalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int colorvalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue colorval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(colorval.line, colorval.pos, colorval.toString(), colorval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue intval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(intval.line, intval.pos, intval.toString(), intval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= LPAREN BYTE RPAREN Expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(op.line, op.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= MEGGYCHECKBUTTON LPAREN Expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(op.line, op.pos, exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= MEGGYGETPIXEL LPAREN Expression COMMA Expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyGetPixel(op.line, op.pos, exp1, exp2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= MINUS Expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(op.line, op.pos, exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression LT Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LtExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression AND Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new AndExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression EQUAL Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new EqualExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= Expression MINUS Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MinusExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= Expression PLUS Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new PlusExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= Expression TIMES Expression 
            {
              IExp RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp lhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp rhs = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MulExp(op.line, op.pos, lhs, rhs); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= LBRACE StatementList RBRACE 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new BlockStatement(op.line, op.pos, stmtlist);  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= Expression DOT ID LPAREN ExpressionList RPAREN SEMI 
            {
              IStatement RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue dot = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new CallStatement(dot.line, dot.pos, exp1, id.toString(), explist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(op.line, op.pos, exp1, stmt1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= IF LPAREN Expression RPAREN Statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line, op.pos, exp, stmt, (IStatement)null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement stmt1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmt2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmt2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line, op.pos, exp1, stmt1, stmt2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= MEGGYDELAY LPAREN Expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyDelay(op.line, op.pos, exp1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= MEGGYSETPIXEL LPAREN Expression COMMA Expression COMMA Expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp exp2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetPixel(op.line, op.pos, exp1, exp2, exp3); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MethodDeclration ::= PUBLIC Type ID LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RBRACE 
            {
              MethodDecl RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IType type = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int formallistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int formallistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		List<Formal> formallist = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MethodDecl(op.line, op.pos, type, name.toString(), formallist, varlist, stmtlist, (IExp)null); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MethodDeclration",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MethodDeclration ::= PUBLIC Type ID LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMI RBRACE 
            {
              MethodDecl RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		IType type = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int formallistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int formallistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		List<Formal> formallist = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MethodDecl(op.line, op.pos, type, name.toString(), formallist, varlist, stmtlist, exp); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MethodDeclration",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassDeclaration ::= CLASS ID LBRACE VarDeclList MethodDeclrationList RBRACE 
            {
              TopClassDecl RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int methodlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<MethodDecl> methodlist = (List<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new TopClassDecl(op.line, op.pos, name.toString(), varlist, methodlist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclList ::= 
            {
              List<VarDecl> RESULT =null;
		 RESULT = new LinkedList<VarDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclList ::= VarDeclList VariableDecl 
            {
              List<VarDecl> RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<VarDecl> varlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		VarDecl variable = (VarDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(variable!=null) {varlist.add(variable);} RESULT=varlist; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FormalList ::= 
            {
              List<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalList",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalList ::= FormalList FormalVar 
            {
              List<Formal> RESULT =null;
		int formallistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int formallistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<Formal> formallist = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int formalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal formal = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(formal!=null) {formallist.add(formal);} RESULT=formallist; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalList",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalList ::= FormalList COMMA FormalVar 
            {
              List<Formal> RESULT =null;
		int formallistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int formallistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<Formal> formallist = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int formalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal formal = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(formal!=null) {formallist.add(formal);} RESULT=formallist; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("FormalList",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExpressionList ::= 
            {
              LinkedList<IExp> RESULT =null;
		 RESULT = new LinkedList<IExp>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ExpressionList",11, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ExpressionList ::= ExpressionList Expression 
            {
              LinkedList<IExp> RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  if(exp!=null) {explist.add(exp);} RESULT = explist;  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ExpressionList",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              LinkedList<IExp> RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  if(exp!=null) {explist.add(exp);} RESULT=explist;  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ExpressionList",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclrationList ::= 
            {
              List<MethodDecl> RESULT =null;
		 RESULT = new LinkedList<MethodDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MethodDeclrationList",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclrationList ::= MethodDeclrationList MethodDeclration 
            {
              List<MethodDecl> RESULT =null;
		int methodlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<MethodDecl> methodlist = (List<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int methodleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl method = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(method!=null) {methodlist.add(method);} RESULT = methodlist; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MethodDeclrationList",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassDeclarationList ::= 
            {
              List<IClassDecl> RESULT =null;
		 RESULT = new LinkedList<IClassDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ClassDeclarationList",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDeclarationList ::= ClassDeclarationList ClassDeclaration 
            {
              List<IClassDecl> RESULT =null;
		int classlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int classlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IClassDecl> classlist = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl c = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 if(c!=null) {classlist.add(c);} RESULT = classlist; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ClassDeclarationList",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // StatementList ::= 
            {
              List<IStatement> RESULT =null;
		 RESULT = new LinkedList<IStatement>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // StatementList ::= StatementList Statement 
            {
              List<IStatement> RESULT =null;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  if (stmt != null) {stmtlist.add(stmt);} RESULT = stmtlist;  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MainClass ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 StatementList RBRACE RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-18)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-17)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		SymbolValue main = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
              System.out.println("END OF FILE");
              RESULT  = new MainClass(op.line, op.pos, name.toString(), param.toString(),  new BlockStatement(op.line, op.pos, stmtlist));
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MainClass",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue main = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;

              System.out.println(param.toString());
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

                System.out.println(name.toString());
                String t_name = name.toString() + ".java";

                if (!parser.programName.contains(t_name)){
                    System.err.println("Filename and Program name are different!");
                    System.exit(0);
                }

            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= IMPORT MEGGY SEMI MainClass ClassDeclarationList 
            {
              Program RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue imp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mainclassleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mainclassright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass mainclass = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int classlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int classlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IClassDecl> classlist = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        System.out.println("PROGRAM");
        RESULT =  new Program(imp.line, imp.pos, mainclass, classlist);

    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

