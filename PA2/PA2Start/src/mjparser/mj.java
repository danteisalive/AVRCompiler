
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 23 21:27:13 EST 2019
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast_visitors.DotVisitor;
import ast.node.*;
import ast.visitor.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 23 21:27:13 EST 2019
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\007\000\002\011" +
    "\002\000\002\012\002\000\002\005\025\000\002\006\004" +
    "\000\002\006\002\000\002\007\002\000\002\010\005\000" +
    "\002\010\004\000\002\010\002\000\002\004\013\000\002" +
    "\004\007\000\002\004\011\000\002\004\007\000\002\004" +
    "\011\000\002\004\005\000\002\003\010\000\002\003\006" +
    "\000\002\003\006\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\017\005\001\002\000\004\002\133\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\011\001\002\000\004\002\ufffa\001\002\000" +
    "\004\061\012\001\002\000\004\011\uffff\001\002\000\004" +
    "\011\014\001\002\000\004\032\015\001\002\000\004\034" +
    "\016\001\002\000\004\036\017\001\002\000\004\016\020" +
    "\001\002\000\004\007\021\001\002\000\004\035\022\001" +
    "\002\000\004\041\023\001\002\000\004\042\024\001\002" +
    "\000\004\061\025\001\002\000\004\010\026\001\002\000" +
    "\004\011\027\001\002\000\040\007\ufffe\011\ufffe\012\ufffe" +
    "\020\ufffe\026\ufffe\052\ufffe\055\ufffe\056\ufffe\057\ufffe\060" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\001\002" +
    "\000\040\007\ufffb\011\ufffb\012\ufffb\020\ufffb\026\ufffb\052" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\001\002\000\040\007\050\011" +
    "\033\012\051\020\041\026\032\052\035\055\046\056\043" +
    "\057\034\060\037\061\045\062\036\063\044\064\047\065" +
    "\052\001\002\000\004\007\126\001\002\000\040\007\ufffb" +
    "\011\ufffb\012\ufffb\020\ufffb\026\ufffb\052\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\001\002\000\004\007\121\001\002\000\004\007" +
    "\111\001\002\000\032\007\uffea\010\uffea\027\uffea\030\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\001\002\000\032\007\uffed\010\uffed\027\uffed" +
    "\030\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\001\002\000\004\030\100\001\002" +
    "\000\004\007\072\001\002\000\040\007\ufffc\011\ufffc\012" +
    "\ufffc\020\ufffc\026\ufffc\052\ufffc\055\ufffc\056\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\001" +
    "\002\000\004\007\065\001\002\000\032\007\uffe9\010\uffe9" +
    "\027\uffe9\030\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\001\002\000\032\007\uffe7" +
    "\010\uffe7\027\uffe7\030\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\001\002\000\004" +
    "\007\061\001\002\000\032\007\uffec\010\uffec\027\uffec\030" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\065\uffec\001\002\000\026\007\050\015\055\056" +
    "\043\057\034\060\037\061\045\062\036\063\044\064\047" +
    "\065\052\001\002\000\004\012\053\001\002\000\032\007" +
    "\uffeb\010\uffeb\027\uffeb\030\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\001\002\000" +
    "\004\002\ufffd\001\002\000\004\010\060\001\002\000\004" +
    "\010\056\001\002\000\024\007\050\056\043\057\034\060" +
    "\037\061\045\062\036\063\044\064\047\065\052\001\002" +
    "\000\032\007\uffee\010\uffee\027\uffee\030\uffee\056\uffee\057" +
    "\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee" +
    "\001\002\000\032\007\uffe8\010\uffe8\027\uffe8\030\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\001\002\000\024\007\050\056\043\057\034\060" +
    "\037\061\045\062\036\063\044\064\047\065\052\001\002" +
    "\000\004\010\063\001\002\000\004\044\064\001\002\000" +
    "\042\007\ufff5\011\ufff5\012\ufff5\020\ufff5\021\ufff5\026\ufff5" +
    "\052\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\001\002\000\024\007\050" +
    "\056\043\057\034\060\037\061\045\062\036\063\044\064" +
    "\047\065\052\001\002\000\004\027\067\001\002\000\024" +
    "\007\050\056\043\057\034\060\037\061\045\062\036\063" +
    "\044\064\047\065\052\001\002\000\004\010\071\001\002" +
    "\000\032\007\ufff0\010\ufff0\027\ufff0\030\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0" +
    "\001\002\000\024\007\050\056\043\057\034\060\037\061" +
    "\045\062\036\063\044\064\047\065\052\001\002\000\004" +
    "\010\074\001\002\000\036\007\050\011\033\020\041\026" +
    "\032\052\035\055\046\056\043\057\034\060\037\061\045" +
    "\062\036\063\044\064\047\065\052\001\002\000\004\021" +
    "\076\001\002\000\036\007\050\011\033\020\041\026\032" +
    "\052\035\055\046\056\043\057\034\060\037\061\045\062" +
    "\036\063\044\064\047\065\052\001\002\000\042\007\ufff4" +
    "\011\ufff4\012\ufff4\020\ufff4\021\ufff4\026\ufff4\052\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\001\002\000\004\061\101\001\002\000" +
    "\004\007\102\001\002\000\030\007\ufff7\010\ufff7\027\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\065\ufff7\001\002\000\030\007\050\010\106\027\105" +
    "\056\043\057\034\060\037\061\045\062\036\063\044\064" +
    "\047\065\052\001\002\000\030\007\ufff8\010\ufff8\027\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\065\ufff8\001\002\000\024\007\050\056\043\057\034" +
    "\060\037\061\045\062\036\063\044\064\047\065\052\001" +
    "\002\000\004\044\107\001\002\000\042\007\ufff2\011\ufff2" +
    "\012\ufff2\020\ufff2\021\ufff2\026\ufff2\052\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\001\002\000\030\007\ufff9\010\ufff9\027\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\001\002\000\024\007\050\056\043\057\034\060" +
    "\037\061\045\062\036\063\044\064\047\065\052\001\002" +
    "\000\004\027\113\001\002\000\024\007\050\056\043\057" +
    "\034\060\037\061\045\062\036\063\044\064\047\065\052" +
    "\001\002\000\004\027\115\001\002\000\024\007\050\056" +
    "\043\057\034\060\037\061\045\062\036\063\044\064\047" +
    "\065\052\001\002\000\004\010\117\001\002\000\004\044" +
    "\120\001\002\000\042\007\ufff6\011\ufff6\012\ufff6\020\ufff6" +
    "\021\ufff6\026\ufff6\052\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\001\002" +
    "\000\024\007\050\056\043\057\034\060\037\061\045\062" +
    "\036\063\044\064\047\065\052\001\002\000\004\010\123" +
    "\001\002\000\032\007\uffef\010\uffef\027\uffef\030\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\001\002\000\040\007\050\011\033\012\125\020" +
    "\041\026\032\052\035\055\046\056\043\057\034\060\037" +
    "\061\045\062\036\063\044\064\047\065\052\001\002\000" +
    "\042\007\ufff1\011\ufff1\012\ufff1\020\ufff1\021\ufff1\026\ufff1" +
    "\052\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\001\002\000\024\007\050" +
    "\056\043\057\034\060\037\061\045\062\036\063\044\064" +
    "\047\065\052\001\002\000\004\010\130\001\002\000\036" +
    "\007\050\011\033\020\041\026\032\052\035\055\046\056" +
    "\043\057\034\060\037\061\045\062\036\063\044\064\047" +
    "\065\052\001\002\000\042\007\ufff3\011\ufff3\012\ufff3\020" +
    "\ufff3\021\ufff3\026\ufff3\052\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\001" +
    "\002\000\004\002\000\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\007\001\001" +
    "\000\004\007\131\001\001\000\002\001\001\000\004\011" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\027\001\001\000\004\006\030\001\001\000\006" +
    "\003\037\004\041\001\001\000\002\001\001\000\004\006" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\065\001\001\000\002" +
    "\001\001\000\004\003\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\072\001\001\000\002\001\001" +
    "\000\006\003\037\004\074\001\001\000\002\001\001\000" +
    "\006\003\037\004\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\102\001\001\000" +
    "\004\003\103\001\001\000\002\001\001\000\004\003\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\111\001\001\000\002\001\001\000\004" +
    "\003\113\001\001\000\002\001\001\000\004\003\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\037\004\041\001\001\000\002\001\001" +
    "\000\004\003\126\001\001\000\002\001\001\000\006\003" +
    "\037\004\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String programName;


    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error",
                                          tok.line, tok.pos);
    }

    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] "
                               + message + " at " + tok.toString() );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= ID 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 //RESULT = new IdLiteral(id.line, id.pos, id.toString()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= LPAREN Expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 //RESULT = exp1; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= FALSE 
            {
              IExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue val = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(val.line, val.pos, val.toString(), val.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= TRUE 
            {
              IExp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue val = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(val.line, val.pos, val.toString(), val.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int buttvalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int buttvalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue buttval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(buttval.line, buttval.pos, buttval.toString(), buttval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int colorvalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int colorvalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue colorval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(colorval.line, colorval.pos, colorval.toString(), colorval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue intval = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(intval.line, intval.pos, intval.toString(), intval.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= LPAREN BYTE RPAREN Expression 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(op.line, op.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= MEGGYCHECKBUTTON LPAREN Expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(op.line, op.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expression ::= MEGGYGETPIXEL LPAREN Expression COMMA Expression RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 //RESULT = new MeggyGetPixel(op.line, op.pos, (IExp)a, (IExp)b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= LBRACE StatementList RBRACE 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new BlockStatement(op.line, op.pos, stmtlist);  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= Expression DOT ID LPAREN ExpressionList RPAREN SEMI 
            {
              IStatement RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue dot = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 //RESULT = new CallStatement(dot.line, dot.pos, exp1, id.toString(), explist); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new WhileStatement(op.line, op.pos, exp1, stmt1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement stmt1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmt2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmt2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IfStatement(op.line, op.pos, exp1, stmt1, stmt2); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= MEGGYDELAY LPAREN Expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggyDelay(op.line, op.pos, exp1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= MEGGYSETPIXEL LPAREN Expression COMMA Expression COMMA Expression RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp exp1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp exp2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp exp3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new MeggySetPixel(op.line, op.pos, exp1, exp2, exp3); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ExpressionList ::= 
            {
              LinkedList<IExp> RESULT =null;
		 //RESULT = new LinkedList<IExp>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ExpressionList",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ExpressionList ::= ExpressionList Expression 
            {
              LinkedList<IExp> RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 /* if(exp!=null) explist.add(exp); RESULT = explist; */ 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ExpressionList",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              LinkedList<IExp> RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> explist = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp exp = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 /* if(exp!=null) {explist.add(exp); } RESULT=explist; */ 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ExpressionList",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDeclarationList ::= 
            {
              List<IClassDecl> RESULT =null;
		 RESULT = new LinkedList<IClassDecl>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("ClassDeclarationList",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // StatementList ::= 
            {
              List<IStatement> RESULT =null;
		 RESULT = new LinkedList<IStatement>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("StatementList",4, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // StatementList ::= StatementList Statement 
            {
              List<IStatement> RESULT =null;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement stmt = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  if (stmt != null) {stmtlist.add(stmt);} RESULT = stmtlist;  
              CUP$mj$result = parser.getSymbolFactory().newSymbol("StatementList",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MainClass ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 StatementList RBRACE RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-18)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-17)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		SymbolValue main = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IStatement> stmtlist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
              System.out.println("END OF FILE");
              RESULT  = new MainClass(op.line, op.pos, name.toString(), param.toString(),  new BlockStatement(op.line, op.pos, stmtlist));
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("MainClass",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              MainClass RESULT =(MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue main = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;

              System.out.println(param.toString());
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

                System.out.println(name.toString());
                String t_name = name.toString() + ".java";

                if (!parser.programName.contains(t_name)){
                    System.err.println("Filename and Program name are different!");
                    System.exit(0);
                }

            
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= IMPORT MEGGY SEMI MainClass ClassDeclarationList 
            {
              Program RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue imp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mainclassleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mainclassright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass mainclass = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int classlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int classlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IClassDecl> classlist = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        System.out.println("PROGRAM");
        RESULT =  new Program(imp.line, imp.pos, mainclass, classlist);

    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

